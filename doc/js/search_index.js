var search_data = {"index":{"searchIndex":["accounts","class","class1","class2","customer","customers","example","modulea","object","person","primarystudents","shape2d","square","student","students","teacher","abstract()","age()","age=()","area()","area()","bye()","check_platform()","display_details()","empty?()","gender()","get_age()","have_breakfast()","hello()","language()","language()","language()","method_a()","method_a()","method_b()","method_b()","method_c()","method_return()","method_return_all()","name()","name()","name()","new()","new()","new()","print_global()","print_global()","promptandget()","reading_charge()","return_date()","say()","show()","testing\\n()","total_no_of_customers()","unknown()","ruby学习提纲","ruby安装","ruby相关工具"],"longSearchIndex":["accounts","class","class1","class2","customer","customers","example","modulea","object","person","primarystudents","shape2d","square","student","students","teacher","class#abstract()","object#age()","object#age=()","shape2d#area()","square#area()","person#bye()","object#check_platform()","customer#display_details()","object#empty?()","students#gender()","person#get_age()","person#have_breakfast()","object#hello()","person#language()","student#language()","teacher#language()","object#method_a()","student#method_a()","object#method_b()","student::method_b()","object#method_c()","object#method_return()","object#method_return_all()","customers#name()","modulea#name()","students#name()","customer::new()","shape2d::new()","square::new()","class1#print_global()","class2#print_global()","object#promptandget()","accounts#reading_charge()","accounts::return_date()","person#say()","example#show()","object#testing\\n()","customer#total_no_of_customers()","object#unknown()","","",""],"info":[["Accounts","","Accounts.html","","<p>Ruby 提供了一种不用实例化即可访问方法的方式。让我们看看如何声明并访问类方法：\n"],["Class","","Class.html","",""],["Class1","","Class1.html","",""],["Class2","","Class2.html","",""],["Customer","","Customer.html","","<p>面向对象的数据和方法 数据结构是用来表达数据的，可作为输入或输出。 方法是做事情的，其有输入、执行逻辑、输出；\n两者本质上是不同的东西，面向对象思想将他们放到一起，使得方法的作用被限制在某一个区域里\n<p>类变量：类变量以@@开始 …\n"],["Customers","","Customers.html","","<p>当使用include方法将模块引入类是,Ruby悄悄地创建了一个单例类并将它插入体系中,这个匿名的不可见类被链向这个模块,因此它们贡献了实例方法和常量。\n"],["Example","","Example.html","","<p>常量： 常量以大写字母开头。在类或模块定义的常量可以在该类或模块访问，在外部定义的常量,类或模块可以全局访问。\n常量不能定义在方法内。引用未初始化的常数会产生一个错误。分配已初始化一个常数会产生一个警告。 …\n"],["ModuleA","","ModuleA.html","","<p>&lt;———————————————————————————————————&gt; …\n"],["Object","","Object.html","",""],["Person","","Person.html","",""],["PrimaryStudents","","PrimaryStudents.html","",""],["Shape2D","","Shape2D.html","",""],["Square","","Square.html","",""],["Student","","Student.html","",""],["Students","","Students.html","","<p>模块永远不会重载类的方法。\n"],["Teacher","","Teacher.html","",""],["abstract","Class","Class.html#method-i-abstract","(*args)",""],["age","Object","Object.html#method-i-age","()","<p>自动生成属性的读写操作attr_* attr_reader   #读方法 attr_reader  :age\n"],["age=","Object","Object.html#method-i-age-3D","(age)","<p>attr_writer   #写方法 attr_writer :price\n"],["area","Shape2D","Shape2D.html#method-i-area","()",""],["area","Square","Square.html#method-i-area","()",""],["bye","Person","Person.html#method-i-bye","()",""],["check_platform","Object","Object.html#method-i-check_platform","(platform)","<p>case语句\n"],["display_details","Customer","Customer.html#method-i-display_details","()","<p>类的成员函数 方法关键字def开始,关键字end表示结束,方法名最后是小写字母\n"],["empty?","Object","Object.html#method-i-empty-3F","()","<p>Ruby中的方法名结尾可以跟?和!。一般来说，以?结尾的方法返回布尔值；以!结尾的方法提示危险性。\n"],["gender","Students","Students.html#method-i-gender","()",""],["get_age","Person","Person.html#method-i-get_age","()",""],["have_breakfast","Person","Person.html#method-i-have_breakfast","()",""],["hello","Object","Object.html#method-i-hello","","<p>chomp和chop的区别: chomp:去掉字符串末尾的n或r chop:去掉字符串末尾的最后一个字符,不管是nr还是普通字符\n"],["language","Person","Person.html#method-i-language","()",""],["language","Student","Student.html#method-i-language","()",""],["language","Teacher","Teacher.html#method-i-language","()",""],["method_a","Object","Object.html#method-i-method_a","()","<p>无参数方法\n"],["method_a","Student","Student.html#method-i-method_a","()",""],["method_b","Object","Object.html#method-i-method_b","(var1, var2)","<p>接受参数的方法\n"],["method_b","Student","Student.html#method-c-method_b","()",""],["method_c","Object","Object.html#method-i-method_c","(var1=\"defaut\")","<p>可以为参数设置默认值，如果方法调用时未传递必需的参数则使用默认值：\n"],["method_return","Object","Object.html#method-i-method_return","()","<p>从方法返回值\n"],["method_return_all","Object","Object.html#method-i-method_return_all","()",""],["name","Customers","Customers.html#method-i-name","()",""],["name","ModuleA","ModuleA.html#method-i-name","()",""],["name","Students","Students.html#method-i-name","()",""],["new","Customer","Customer.html#method-c-new","(id, name, addr)",""],["new","Shape2D","Shape2D.html#method-c-new","()",""],["new","Square","Square.html#method-c-new","(length)",""],["print_global","Class1","Class1.html#method-i-print_global","()",""],["print_global","Class2","Class2.html#method-i-print_global","()",""],["promptAndGet","Object","Object.html#method-i-promptAndGet","(prompt)","<p>catch和throw： 虽然异常处理机制 raise 和 rescue 是非常适合放弃执行在出问题时，能够跳出一些深层嵌套的结构，再正常处理。\n在catch定义一个块的标记给定的名称（这可能是一个符号或一个字符串）。该块正常执行，直到遇到抛出。 …\n"],["reading_charge","Accounts","Accounts.html#method-i-reading_charge","()",""],["return_date","Accounts","Accounts.html#method-c-return_date","()",""],["say","Person","Person.html#method-i-say","()",""],["show","Example","Example.html#method-i-show","()",""],["testing\\n","Object","Object.html#method-i-testing-5Cn","","<p>if\n"],["total_no_of_customers","Customer","Customer.html#method-i-total_no_of_customers","()",""],["unknown","Object","Object.html#method-i-unknown","","<p>调用方法\n"],["Ruby学习提纲","","Ruby学习提纲_md.html","","<p>Ruby学习提纲\n<p>Ruby环境的安装和卸载\n<p>开发工具Sublime 或 TextMate 2 或 RubyMine(IDE) 或任一文本编辑器\n"],["Ruby安装","","Ruby安装_md.html","","<p>Windows: RubyInstaller\n<p>rubyinstaller.org/downloads/\n<p>Mac: rvm install\n"],["Ruby相关工具","","Ruby相关工具_md.html","","<p>RVM\n<p>www.rvm.io/\n<p>安装rvm\n curl -sSL get.rvm.io | bash -s\nstable\n用于帮你安装Ruby环境，帮你管理多个Ruby环境，帮你管理你开发的每个Ruby应用使用机器上哪个Ruby环境。Ruby环境不仅仅是Ruby本身，还包括依赖的第三方Ruby插件。都由RVM管理。\n...\n"]]}}